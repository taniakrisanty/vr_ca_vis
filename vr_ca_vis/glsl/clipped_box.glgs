#version 330
#extension GL_EXT_geometry_shader4 : enable

layout(points) in;
layout(triangle_strip, max_vertices = 24) out;

in mat3 NM[];
in mat4 PM[];
in vec4 color_gs[];
flat in int visible[];

out vec3 normal;
out vec4 color_fs;
out vec3 position;
flat out int side;

const int MAX_CLIPPING_PLANES = 8;

out float gl_ClipDistance[MAX_CLIPPING_PLANES];

uniform int num_clipping_planes;
uniform vec4 clipping_planes[MAX_CLIPPING_PLANES];

//***** begin interface of side.glsl ***********************************
bool keep_this_side(in vec3 position, in vec3 normal, out int side);
void update_material_color_and_transparency(inout vec3 mat_color, inout float transparency, in int side, in vec4 color);
void update_normal(inout vec3 normal, in int side);
//***** end interface of side.glsl ***********************************

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

void emit_face(in vec3 normal_in, in vec4 c0, in vec4 c1, in vec4 c2, in vec4 c3)
{
	if (visible[0] < 1)
		return;

	color_fs = color_gs[0];
	// compute eye space normal and first corner position
	normal = normal_in;
	position = c0.xyz;

	// determine side in eye space and check for culling
	if (!keep_this_side(position, normal, side))
		return;

	// emit face
	gl_Position = get_projection_matrix() * c0;
	for (int i = 0; i < num_clipping_planes; ++i)
	{
		gl_ClipDistance[i] = dot(get_inverse_modelview_matrix() * c0, clipping_planes[i]);
	}
	EmitVertex();
	position = c1.xyz;
	gl_Position = get_projection_matrix() * c1;
	for (int i = 0; i < num_clipping_planes; ++i)
	{
		gl_ClipDistance[i] = dot(get_inverse_modelview_matrix() * c1, clipping_planes[i]);
	}
	EmitVertex();
	position = c2.xyz;
	gl_Position = get_projection_matrix() * c2;
	for (int i = 0; i < num_clipping_planes; ++i)
	{
		gl_ClipDistance[i] = dot(get_inverse_modelview_matrix() * c2, clipping_planes[i]);
	}
	EmitVertex();
	position = c3.xyz;
	gl_Position = get_projection_matrix() * c3;
	for (int i = 0; i < num_clipping_planes; ++i)
	{
		gl_ClipDistance[i] = dot(get_inverse_modelview_matrix() * c3, clipping_planes[i]);
	}
	EmitVertex();
	EndPrimitive();
}

void main()
{
	vec4 C0 = PM[0] * vec4(-0.5, -0.5, -0.5, 1.0);
	vec4 C1 = PM[0] * vec4(0.5, -0.5, -0.5, 1.0);
	vec4 C2 = PM[0] * vec4(-0.5, 0.5, -0.5, 1.0);
	vec4 C3 = PM[0] * vec4(0.5, 0.5, -0.5, 1.0);
	vec4 C4 = PM[0] * vec4(-0.5, -0.5, 0.5, 1.0);
	vec4 C5 = PM[0] * vec4(0.5, -0.5, 0.5, 1.0);
	vec4 C6 = PM[0] * vec4(-0.5, 0.5, 0.5, 1.0);
	vec4 C7 = PM[0] * vec4(0.5, 0.5, 0.5, 1.0);
	emit_face(NM[0] * vec3(-1.0, 0.0, 0.0), C0, C4, C2, C6);
	emit_face(NM[0] * vec3(1.0, 0.0, 0.0), C5, C1, C7, C3);
	emit_face(NM[0] * vec3(0.0, -1.0, 0.0), C0, C1, C4, C5);
	emit_face(NM[0] * vec3(0.0, 1.0, 0.0), C3, C2, C7, C6);
	emit_face(NM[0] * vec3(0.0, 0.0, -1.0), C0, C2, C1, C3);
	emit_face(NM[0] * vec3(0.0, 0.0, 1.0), C6, C4, C7, C5);
}
